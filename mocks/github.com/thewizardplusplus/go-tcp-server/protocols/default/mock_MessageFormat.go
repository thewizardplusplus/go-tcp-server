// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package defaultBaseProtocolMocks

import (
	mock "github.com/stretchr/testify/mock"
	defaultProtocolModels "github.com/thewizardplusplus/go-tcp-server/protocols/default/models"
)

// NewMockMessageFormat creates a new instance of MockMessageFormat. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessageFormat(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessageFormat {
	mock := &MockMessageFormat{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMessageFormat is an autogenerated mock type for the MessageFormat type
type MockMessageFormat struct {
	mock.Mock
}

type MockMessageFormat_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessageFormat) EXPECT() *MockMessageFormat_Expecter {
	return &MockMessageFormat_Expecter{mock: &_m.Mock}
}

// MarshalMessage provides a mock function for the type MockMessageFormat
func (_mock *MockMessageFormat) MarshalMessage(message defaultProtocolModels.Message) ([]byte, error) {
	ret := _mock.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for MarshalMessage")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(defaultProtocolModels.Message) ([]byte, error)); ok {
		return returnFunc(message)
	}
	if returnFunc, ok := ret.Get(0).(func(defaultProtocolModels.Message) []byte); ok {
		r0 = returnFunc(message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(defaultProtocolModels.Message) error); ok {
		r1 = returnFunc(message)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMessageFormat_MarshalMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalMessage'
type MockMessageFormat_MarshalMessage_Call struct {
	*mock.Call
}

// MarshalMessage is a helper method to define mock.On call
//   - message
func (_e *MockMessageFormat_Expecter) MarshalMessage(message interface{}) *MockMessageFormat_MarshalMessage_Call {
	return &MockMessageFormat_MarshalMessage_Call{Call: _e.mock.On("MarshalMessage", message)}
}

func (_c *MockMessageFormat_MarshalMessage_Call) Run(run func(message defaultProtocolModels.Message)) *MockMessageFormat_MarshalMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(defaultProtocolModels.Message))
	})
	return _c
}

func (_c *MockMessageFormat_MarshalMessage_Call) Return(bytes []byte, err error) *MockMessageFormat_MarshalMessage_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockMessageFormat_MarshalMessage_Call) RunAndReturn(run func(message defaultProtocolModels.Message) ([]byte, error)) *MockMessageFormat_MarshalMessage_Call {
	_c.Call.Return(run)
	return _c
}

// ParseMessage provides a mock function for the type MockMessageFormat
func (_mock *MockMessageFormat) ParseMessage(data []byte) (defaultProtocolModels.Message, error) {
	ret := _mock.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for ParseMessage")
	}

	var r0 defaultProtocolModels.Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte) (defaultProtocolModels.Message, error)); ok {
		return returnFunc(data)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte) defaultProtocolModels.Message); ok {
		r0 = returnFunc(data)
	} else {
		r0 = ret.Get(0).(defaultProtocolModels.Message)
	}
	if returnFunc, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = returnFunc(data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMessageFormat_ParseMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseMessage'
type MockMessageFormat_ParseMessage_Call struct {
	*mock.Call
}

// ParseMessage is a helper method to define mock.On call
//   - data
func (_e *MockMessageFormat_Expecter) ParseMessage(data interface{}) *MockMessageFormat_ParseMessage_Call {
	return &MockMessageFormat_ParseMessage_Call{Call: _e.mock.On("ParseMessage", data)}
}

func (_c *MockMessageFormat_ParseMessage_Call) Run(run func(data []byte)) *MockMessageFormat_ParseMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockMessageFormat_ParseMessage_Call) Return(message defaultProtocolModels.Message, err error) *MockMessageFormat_ParseMessage_Call {
	_c.Call.Return(message, err)
	return _c
}

func (_c *MockMessageFormat_ParseMessage_Call) RunAndReturn(run func(data []byte) (defaultProtocolModels.Message, error)) *MockMessageFormat_ParseMessage_Call {
	_c.Call.Return(run)
	return _c
}
