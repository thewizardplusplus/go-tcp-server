// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package tcpServerMocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockerrorHandler creates a new instance of MockerrorHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockerrorHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockerrorHandler {
	mock := &MockerrorHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockerrorHandler is an autogenerated mock type for the errorHandler type
type MockerrorHandler struct {
	mock.Mock
}

type MockerrorHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockerrorHandler) EXPECT() *MockerrorHandler_Expecter {
	return &MockerrorHandler_Expecter{mock: &_m.Mock}
}

// HandleError provides a mock function for the type MockerrorHandler
func (_mock *MockerrorHandler) HandleError(err error) {
	_mock.Called(err)
	return
}

// MockerrorHandler_HandleError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleError'
type MockerrorHandler_HandleError_Call struct {
	*mock.Call
}

// HandleError is a helper method to define mock.On call
//   - err
func (_e *MockerrorHandler_Expecter) HandleError(err interface{}) *MockerrorHandler_HandleError_Call {
	return &MockerrorHandler_HandleError_Call{Call: _e.mock.On("HandleError", err)}
}

func (_c *MockerrorHandler_HandleError_Call) Run(run func(err error)) *MockerrorHandler_HandleError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *MockerrorHandler_HandleError_Call) Return() *MockerrorHandler_HandleError_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockerrorHandler_HandleError_Call) RunAndReturn(run func(err error)) *MockerrorHandler_HandleError_Call {
	_c.Run(run)
	return _c
}
