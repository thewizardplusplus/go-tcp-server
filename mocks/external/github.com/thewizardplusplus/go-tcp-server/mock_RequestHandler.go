// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package tcpServerExternalMocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	tcpServer "github.com/thewizardplusplus/go-tcp-server"
)

// NewMockRequestHandler creates a new instance of MockRequestHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRequestHandler[Req tcpServer.Request, Resp tcpServer.Response](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRequestHandler[Req, Resp] {
	mock := &MockRequestHandler[Req, Resp]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRequestHandler is an autogenerated mock type for the RequestHandler type
type MockRequestHandler[Req tcpServer.Request, Resp tcpServer.Response] struct {
	mock.Mock
}

type MockRequestHandler_Expecter[Req tcpServer.Request, Resp tcpServer.Response] struct {
	mock *mock.Mock
}

func (_m *MockRequestHandler[Req, Resp]) EXPECT() *MockRequestHandler_Expecter[Req, Resp] {
	return &MockRequestHandler_Expecter[Req, Resp]{mock: &_m.Mock}
}

// HandleRequest provides a mock function for the type MockRequestHandler
func (_mock *MockRequestHandler[Req, Resp]) HandleRequest(ctx context.Context, request Req) (Resp, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for HandleRequest")
	}

	var r0 Resp
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, Req) (Resp, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, Req) Resp); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Resp)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, Req) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRequestHandler_HandleRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleRequest'
type MockRequestHandler_HandleRequest_Call[Req tcpServer.Request, Resp tcpServer.Response] struct {
	*mock.Call
}

// HandleRequest is a helper method to define mock.On call
//   - ctx
//   - request
func (_e *MockRequestHandler_Expecter[Req, Resp]) HandleRequest(ctx interface{}, request interface{}) *MockRequestHandler_HandleRequest_Call[Req, Resp] {
	return &MockRequestHandler_HandleRequest_Call[Req, Resp]{Call: _e.mock.On("HandleRequest", ctx, request)}
}

func (_c *MockRequestHandler_HandleRequest_Call[Req, Resp]) Run(run func(ctx context.Context, request Req)) *MockRequestHandler_HandleRequest_Call[Req, Resp] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(Req))
	})
	return _c
}

func (_c *MockRequestHandler_HandleRequest_Call[Req, Resp]) Return(v Resp, err error) *MockRequestHandler_HandleRequest_Call[Req, Resp] {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockRequestHandler_HandleRequest_Call[Req, Resp]) RunAndReturn(run func(ctx context.Context, request Req) (Resp, error)) *MockRequestHandler_HandleRequest_Call[Req, Resp] {
	_c.Call.Return(run)
	return _c
}
